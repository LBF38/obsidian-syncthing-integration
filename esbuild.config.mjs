import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import sass from "sass";
import minify from "css-minify";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
https://github.com/LBF38/obsidian-syncthing-integration
*/
`;

const cssBanner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
https://github.com/LBF38/obsidian-syncthing-integration
*/
`;

const copyManifest = {
	name: "copy-manifest",
	setup: (build) => {
		build.onEnd(() => {
			fs.copyFileSync("manifest.json", `${outdir}/manifest.json`);
		});
	},
};
const copyMinifiedCSS = {
	name: "minify-css",
	setup: (build) => {
		build.onEnd(async () => {
			const { css } = sass.compile("src/styles.scss");
			const minCss = await minify(css);
			const content = `${cssBanner}\n${minCss}`;
			fs.writeFileSync(`${outdir}/styles.css`, content, {
				encoding: "utf-8",
			});
		});
	},
};

const prod = process.argv[2] === "production";
const outdir = prod ? "build" : ".";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts", "src/styles.scss"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	minify: prod,
	treeShaking: true,
	outdir: outdir,
	plugins: [copyManifest, copyMinifiedCSS],
	loader: { ".scss": "text" },
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
